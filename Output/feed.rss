<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content"><channel><title>Brian</title><description>A description of Brian</description><link>https://brian.dk</link><language>en</language><lastBuildDate>Sun, 5 Jan 2020 17:46:37 +0100</lastBuildDate><pubDate>Sun, 5 Jan 2020 17:46:37 +0100</pubDate><ttl>250</ttl><atom:link href="https://brian.dk/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://brian.dk/posts/create-a-publish-theme-in-its-own-swift-package</guid><title>Create a Publish theme in it's own Swift Package</title><description>In this post I will show how to create a new theme for Publish in it's own Swift Package.</description><link>https://brian.dk/posts/create-a-publish-theme-in-its-own-swift-package</link><pubDate>Sun, 5 Jan 2020 12:39:00 +0100</pubDate><content:encoded><![CDATA[<h1>Create a Publish theme in it's own Swift Package</h1><p>As promised <a href="https://swiftbysundell.com/">John Sundell</a> released the last tool for his Swift based Static Site Generator, just before we said goodbye to 2019 üëã</p><p>6 days later <a href="https://github.com/johnsundell/publish">Publish</a> have been well received by the community. With more than 1200 stars on GitHub and we already got a new release (0.2.0) with some great improvements made by the community. Since Publish is new, there is still a lot of questions on how to use this new cool tool.<br>With this post I will show, how you can make your own theme for your new website.<br><br>Let's fire up Xcode and start by creating a new Swift Package: <code>File &gt; New &gt; Swift Package...</code><br>If you are making an open source theme, I will suggest using PublishTheme in the name of your package.<br>Just so other people can see this is a theme for Publish.<br>In this post I will make <code>BrianPublishTheme</code> and define it as <code>brian</code>.</p><p>First step is to add Publish as a dependency. Open Package.swift and add Publish to dependencies:</p><pre><code><span class="comment">// swift-tools-version:5.1
// The swift-tools-version declares the minimum version of Swift required to build this package.</span>

<span class="keyword">import</span> PackageDescription

<span class="keyword">let</span> package = <span class="type">Package</span>(
    name: <span class="string">"BrianPublishTheme"</span>,
    products: [
        .<span class="call">library</span>(
            name: <span class="string">"BrianPublishTheme"</span>,
            targets: [<span class="string">"BrianPublishTheme"</span>]),
    ],
    dependencies: [
        .<span class="call">package</span>(url: <span class="string">"https://github.com/johnsundell/publish.git"</span>, from: <span class="string">"0.2.0"</span>)
    ],
    targets: [
        .<span class="call">target</span>(
            name: <span class="string">"BrianPublishTheme"</span>,
            dependencies: [<span class="string">"Publish"</span>]),
    ]
)
</code></pre><p><em>Remember also to add Publish as dependencies in the target.</em><br><br><br>To store your resources like images, css or what else you will need, we create a <code>Resources</code> folder. And to keep the same structure as Publish, we create a folder named <code>BrianTheme</code> and copys the <code>styles.css</code> file from Publish into it. Now we have a starting point if you not already have your own <code>.css</code> file.<br><br>In <code>Sources/BrianPublishTheme</code> there is a swift file that was made when we created the package. Renamed it to <code>Theme+Brian.swift</code>, again to keep the same structure/naming as in Publish. To get started quickly and to have something to play with, you can copy the code from <code>Sources/Publish/API/Theme+Foundation.swift</code> and modified it for your needs. Remember to change the name of the variable and the <code>HTMLFactory</code> struct.</p><pre><code>...
<span class="keyword">public extension</span> <span class="type">Theme</span> {
    <span class="keyword">static var</span> brian: <span class="type">Self</span> {
        <span class="type">Theme</span>(
            htmlFactory: <span class="type">BrianHTMLFactory</span>(),
            resourcePaths: [<span class="string">"Resources/BrianTheme/styles.css"</span>]
        )
    }
}

<span class="keyword">private struct</span> BrianHTMLFactory&lt;Site: <span class="type">Website</span>&gt;: <span class="type">HTMLFactory</span> {
...
}
</code></pre><p>Now let's implement this new theme package to our website. Open your project or create a new project by following the <a href="https://github.com/JohnSundell/Publish#quick-start">Quick start</a> guide. In <code>Package.swift</code> we will add the new theme package as a local dependency, so it's easy to make changes to the theme without having to make a release every time you adjust a font size or a text color:</p><pre><code><span class="keyword">let</span> package = <span class="type">Package</span>(
    ...
    dependencies: [
        .<span class="call">package</span>(url: <span class="string">"https://github.com/johnsundell/publish"</span>, from: <span class="string">"0.2.0"</span>),
        .<span class="call">package</span>(path: <span class="string">"../BrianPublishTheme"</span>)
    ],
    targets: [
        .<span class="call">target</span>(
            name: <span class="string">"Brian"</span>,
            dependencies: [<span class="string">"Publish"</span>,
                           <span class="string">"BrianPublishTheme"</span>]
        )
    ]
)
</code></pre><p>Last step is to start using the new theme. In the <code>main.swift</code> file we need to import the theme package:</p><pre><code><span class="keyword">import</span> BrianPublishTheme
</code></pre><p>And now we can use it by defining it like:</p><pre><code><span class="keyword">try</span> <span class="type">Brian</span>().<span class="call">publish</span>(withTheme: .<span class="dotAccess">brian</span>)
</code></pre><p>You can find both the <a href="https://github.com/Dinsen/BrianPublishTheme">BrianPublishTheme</a> and the <a href="https://github.com/Dinsen/BrianPublish">Brian</a> Publish project on GitHub.<br><br>Okay, so this was my debut as a writer and I hope you could use this post. If you have any feedback on how I can improve writing, then please let me know. You can find me on <a href="https://twitter.com/briandinsen">Twitter</a></p><p>Thanks for reading üôè</p>]]></content:encoded></item><item><guid isPermaLink="true">https://brian.dk/posts/second-post</guid><title>My second post</title><description>A description of my second post.</description><link>https://brian.dk/posts/second-post</link><pubDate>Sat, 4 Jan 2020 15:03:00 +0100</pubDate><content:encoded><![CDATA[<h1>My second post</h1><p>My second post's text.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://brian.dk/posts/first-post</guid><title>My first post</title><description>A description of my first post.</description><link>https://brian.dk/posts/first-post</link><pubDate>Sat, 4 Jan 2020 01:24:00 +0100</pubDate><content:encoded><![CDATA[<h1>My first post</h1><p>My first post's text.</p>]]></content:encoded></item></channel></rss>